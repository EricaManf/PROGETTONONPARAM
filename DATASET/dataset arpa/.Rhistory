x11()
plot(X, asp=1, xlab='var 1', ylab='var 2', pch=19)
points(colMeans(X)[1], colMeans(X)[2], col='red', pch=19)
means <- colMeans(X)
S <- cov(X)
r <- eigen(S, symmetric = TRUE)
lambda <- r$values
eigenvectors <- r$vectors
abline(a=means[2]-eigenvectors[2,1]/eigenvectors[1,1]*means[1], b=eigenvectors[2,1]/eigenvectors[1,1])
grid on
grid()
abline(a=means[2]-eigenvectors[2,2]/eigenvectors[1,2]*means[1], b=eigenvectors[2,1]/eigenvectors[1,1])
abline(a=means[2]-eigenvectors[2,1]/eigenvectors[1,1]*means[1], b=eigenvectors[2,1]/eigenvectors[1,1])
library(mvtnorm)
mu=c(1,2)
sigma=cbind(c(1,1), c(1,4))
n=100
set.seed(23)
X <- rmvnorm(n,mu,sigma)
x11()
plot(X, asp=1, xlab='var 1', ylab='var 2', pch=19)
points(colMeans(X)[1], colMeans(X)[2], col='red', pch=19)
means <- colMeans(X)
S <- cov(X)
r <- eigen(S, symmetric = TRUE)
lambda <- r$values
eigenvectors <- r$vectors
abline(a=means[2]-eigenvectors[2,1]/eigenvectors[1,1]*means[1], b=eigenvectors[2,1]/eigenvectors[1,1])
abline(a=means[2]-eigenvectors[2,2]/eigenvectors[1,2]*means[1], b=eigenvectors[22,]/eigenvectors[1,2])
abline(a=means[2]-eigenvectors[2,2]/eigenvectors[1,2]*means[1], b=eigenvectors[2,2]/eigenvectors[1,2])
grid()
mu.2 <- 4
rm(list= mu.2)
rm(list = mu.2)
library(mvtnorm)
mu=c(1,2)
sigma=cbind(c(1,1), c(1,4))
n=100
set.seed(23)
X <- rmvnorm(n,mu,sigma)
x11()
plot(X, asp=1, xlab='var 1', ylab='var 2', pch=19)
grid()
points(colMeans(X)[1], colMeans(X)[2], col='red', pch=19)
means <- colMeans(X)
S <- cov(X)
r <- eigen(S, symmetric = TRUE)
lambda <- r$values
eigenvectors <- r$vectors
abline(a=means[2]-eigenvectors[2,1]/eigenvectors[1,1]*means[1], b=eigenvectors[2,1]/eigenvectors[1,1])
abline(a=means[2]-eigenvectors[2,2]/eigenvectors[1,2]*means[1], b=eigenvectors[2,2]/eigenvectors[1,2])
X.sd <-scale(X)
View(X.sd)
View(X.sd)
help ("data.frame")
help("head")
X.sd <- data.frame(X.sd)
View(X.sd)
View(X.sd)
boxplot(X,sd)
boxplot(X.sd)
boxplot(X.sd, las=3, col='gold')
boxplot(X.sd, las=2, col='gold')
boxplot(X.sd, las=1, col='gold')
boxplot(X.sd, las=2, col='gold')
boxplot(X.sd, las=3, col='gold')
help(boxplot)
View(S)
View(r)
View(S)
View(S)
cov(X.sd)
help("princomp")
pc.Xsd <- princomp(X.sd)
summary(pc.Xsd)
summary(X.sd)
r.sd = eigen(X.sd)
r.sd = eigen(cov(X.sd))
r.sd$values
r.sd$values[1]/(r.sd$values[1]+r.sd$values[2])
sqrt(r.sd$values[1])
plot(X.sd)
rm(list=ls(all))
rm(list = ls())
clc
qnorm(0.0975)
qnorm(0.975)
qnorm(0.005)
~
remove(list=ls())
install.packages("dbscan")
library(dbscan)
data <- read.table('C:/Users/E5440/Desktop/esami/Applied Statistics/Progetto/reduced_dataset.csv', sep=',', header=TRUE)
View(data)
(range(data$timestamp)[2]- range(data$timestamp)[1])/86400
View(data)
data <- data[,c(1,4,5)]
View(data)
24*60*60
data1 <- NULL
data2 <- NULL
data3 <- NULL
data4<- NULL
for (i in i:dim(data)[1]) {
if (data[i,1]<=(ts.i+21*24*60*60)){
data1 <- rbind(data1, data[i,])
}
if(data[i,1]>(ts.i+21*24*60*60) & data[i,1]<=(ts.i+42*24*60*60)){
data2 <- rbind(data2, data[i,])
}
if(data[i,1]>(ts.i+42*24*60*60) & data[i,1]<=(ts.i+63*24*60*60)){
data3 <- rbind(data3, data[i,])
}
else data4 <- rbind(data4, data[i])
}
for (i in 1:dim(data)[1]) {
if (data[i,1]<=(ts.i+21*24*60*60)){
data1 <- rbind(data1, data[i,])
}
if(data[i,1]>(ts.i+21*24*60*60) & data[i,1]<=(ts.i+42*24*60*60)){
data2 <- rbind(data2, data[i,])
}
if(data[i,1]>(ts.i+42*24*60*60) & data[i,1]<=(ts.i+63*24*60*60)){
data3 <- rbind(data3, data[i,])
}
else data4 <- rbind(data4, data[i])
}
ts.i <- 1581807600
#8-10 del mattino
data1 <- NULL
data2 <- NULL
data3 <- NULL
data4<- NULL
for (i in 1:dim(data)[1]) {
if (data[i,1]<=(ts.i+21*24*60*60)){
data1 <- rbind(data1, data[i,])
}
if(data[i,1]>(ts.i+21*24*60*60) & data[i,1]<=(ts.i+42*24*60*60)){
data2 <- rbind(data2, data[i,])
}
if(data[i,1]>(ts.i+42*24*60*60) & data[i,1]<=(ts.i+63*24*60*60)){
data3 <- rbind(data3, data[i,])
}
else data4 <- rbind(data4, data[i])
}
for (i in 1:dim(data)[1]) {
if (data[i,1]<=(ts.i+21*24*60*60)){
data1 <- rbind(data1, data[i,])
}
else if(data[i,1]>(ts.i+21*24*60*60) & data[i,1]<=(ts.i+42*24*60*60)){
data2 <- rbind(data2, data[i,])
}
else if(data[i,1]>(ts.i+42*24*60*60) & data[i,1]<=(ts.i+63*24*60*60)){
data3 <- rbind(data3, data[i,])
}
else data4 <- rbind(data4, data[i])
}
for (i in 1:dim(data)[1]) {
if (data[i,1]<=(ts.i+21*24*60*60)){
data1 <- rbind(data1, data[i,])
}
else if(data[i,1]>(ts.i+21*24*60*60) & data[i,1]<=(ts.i+42*24*60*60)){
data2 <- rbind(data2, data[i,])
}
else if(data[i,1]>(ts.i+42*24*60*60) & data[i,1]<=(ts.i+63*24*60*60)){
data3 <- rbind(data3, data[i,])
}
else data4 <- rbind(data4, data[i,])
}
data1 <- NULL
data2 <- NULL
data3 <- NULL
data4 <- NULL
for (i in 1:dim(data)[1]) {
if (data[i,1]<=(ts.i+21*24*60*60)){
data1 <- rbind(data1, data[i,])
}
else if(data[i,1]>(ts.i+21*24*60*60) & data[i,1]<=(ts.i+42*24*60*60)){
data2 <- rbind(data2, data[i,])
}
else if(data[i,1]>(ts.i+42*24*60*60) & data[i,1]<=(ts.i+63*24*60*60)){
data3 <- rbind(data3, data[i,])
}
else {data4 <- rbind(data4, data[i,])}
}
ts.f <- 1589579999
24*60*60
#8-10 del mattino
ndays <- (ts.f-ts.i)/86400
ndays
#8-10 del mattino
ndays <- round((ts.f-ts.i)/86400)
ndays
ts.i <- 1581807600
ts.f <- 1589579999
#8-10 del mattino
ndays <- round((ts.f-ts.i)/86400)
ndays
ts.f <- 1588723199
#8-10 del mattino
ndays <- round((ts.f-ts.i)/86400)
ndays
0:ndays
low.h <- 8*60*60
high.h <- 10*60*60
8*60*60
#8-10 del mattino
ndays <- round((ts.f-ts.i)/86400)
ndays
data1.h <- NULL
data2.h <- NULL
data3.h <- NULL
data4.h <- NULL
data1 <- NULL
data2 <- NULL
data3 <- NULL
data4 <- NULL
low.h <- 8*60*60
high.h <- 10*60*60
for (i in 1:dim(data)[1]) {
if (data[i,1]<=(ts.i+21*24*60*60)){
data1 <- rbind(data1, data[i,])
}
if(data[i,1]>(ts.i+21*24*60*60) & data[i,1]<=(ts.i+42*24*60*60)){
data2 <- rbind(data2, data[i,])
}
if(data[i,1]>(ts.i+42*24*60*60) & data[i,1]<=(ts.i+63*24*60*60)){
data3 <- rbind(data3, data[i,])
}
if(data[i,1]>(ts.i+63*24*60*60) & data[i,1]<=ts.f){data4 <- rbind(data4, data[i,])}
}
ndays <- round((ts.f-ts.i)/86400)
data1.h <- NULL
data2.h <- NULL
data3.h <- NULL
data4.h <- NULL
for(i in 0:ndays){
for(j in 1:dim(data1)[1]){
if (data1[j,1] >= ts.i + i*86400 + low.h & data1[j,1]<= ts.i + i*86400 + high.h){
data1.h <- rbind(data1.h, data1[j,])
}
}
for(j in 1:dim(data2)[1]){
if (data2[j,1]>= ts.i + i*86400 + low.h & data2[j,1]<= ts.i + i*86400 + high.h){
data2.h <- rbind(data2.h, data2[j,])
}
}
for(j in 1:dim(data3)[1]){
if (data3[j,1]>= ts.i + i*86400 + low.h & data3[j,1]<= ts.i + i*86400 + high.h){
data3.h <- rbind(data3.h, data3[j,])
}
}
for(j in 1:dim(data4)[1]){
if (data4[j,1]>= ts.i + i*86400 + low.h & data4[j,1]<= ts.i + i*86400 + high.h){
data4.h <- rbind(data4.h, data4[j,])
}
}
}
kNNdistplot(as.matrix(data1.h), dim(data1.h)[2]+1)
x11()
kNNdistplot(as.matrix(data1.h), dim(data1.h)[2]+1)
x11()
kNNdistplot(as.matrix(data1.h), dim(data1.h)[2]+1)
lines(1:dim(data1.h), 30)
x11()
kNNdistplot(as.matrix(data1.h), dim(data1.h)[2]+1)
lines(1:dim(data1.h), rep(30, dim(data1.h)))
x11()
kNNdistplot(as.matrix(data1.h), dim(data1.h)[2]+1)
lines(1:dim(data1.h), rep(30, dim(data1.h)[2]))
x11()
kNNdistplot(as.matrix(data1.h), dim(data1.h)[2]+1)
lines(1:dim(data1.h)[1], rep(30, dim(data1.h)[1]))
x11()
kNNdistplot(as.matrix(data1.h), dim(data1.h)[2]+1)
lines(1:dim(data1.h)[1], rep(20, dim(data1.h)[1]))
x11()
kNNdistplot(data1.h, dim(data1.h)[2]+1)
lines(1:dim(data1.h)[1], rep(20, dim(data1.h)[1]), col='red')
eps.1 <- 20
clust.1 <- dbscan(data1.h, eps = eps.1, minPts = dim(data1.h)[2]+1)
clust.1
x11()
pairs(data1.h, col=clust.1$cluster+1)
data1.h <- as.matrix(data1.h[,2:3])
data2.h <- as.matrix(data2.h[,2:3])
data3.h <- as.matrix(data3.h[,2:3])
data4.h <- as.matrix(data4.h[,2:3])
x11()
kNNdistplot(data1.h, dim(data1.h)[2]+1)
lines(1:dim(data1.h)[1], rep(20, dim(data1.h)[1]), col='red')
x11()
kNNdistplot(data1.h, dim(data1.h)[2]+1)
lines(1:dim(data1.h)[1], rep(0.006, dim(data1.h)[1]), col='red')
x11()
kNNdistplot(data1.h, dim(data1.h)[2]+1)
lines(1:dim(data1.h)[1], rep(0.008, dim(data1.h)[1]), col='red')
eps.1 <- 0.008
clust.1 <- dbscan(data1.h, eps = eps.1, minPts = dim(data1.h)[2]+1)
clust.1
x11()
plot(data1.h, col=clust.1$cluster+1)
x11()
kNNdistplot(data1.h, dim(data1.h)[2]+1)
lines(1:dim(data1.h)[1], rep(0.008, dim(data1.h)[1]), col='red')
x11()
kNNdistplot(data1.h, dim(data1.h)[2]+1)
lines(1:dim(data1.h)[1], rep(0.005, dim(data1.h)[1]), col='red')
eps.1 <- 0.005
clust.1 <- dbscan(data1.h, eps = eps.1, minPts = dim(data1.h)[2]+1)
clust.1
x11()
plot(data1.h, col=clust.1$cluster+1)
x11()
kNNdistplot(data1.h, dim(data1.h)[2]+1)
lines(1:dim(data1.h)[1], rep(0.005, dim(data1.h)[1]), col='red')
x11()
kNNdistplot(data1.h, dim(data1.h)[2]+1)
lines(1:dim(data1.h)[1], rep(0.01, dim(data1.h)[1]), col='red')
eps.1 <- 0.01
clust.1 <- dbscan(data1.h, eps = eps.1, minPts = dim(data1.h)[2]+1)
clust.1
x11()
plot(data1.h, col=clust.1$cluster+1)
x11()
kNNdistplot(data2.h, dim(data2.h)[2]+1)
lines(1:dim(data2.h)[1], rep(0.005, dim(data2.h)[1]), col='red')
x11()
kNNdistplot(data2.h, dim(data2.h)[2]+1)
x11()
kNNdistplot(data2.h, dim(data2.h)[2]+1)
lines(1:dim(data2.h)[1], rep(0.01, dim(data2.h)[1]), col='red')
eps.2 <- 0.01
clust.2 <- dbscan(data2.h, eps = eps.2, minPts = dim(data2.h)[2]+1)
clust.2
x11()
plot(data2.h, col=clust.2$cluster+1)
x11()
plot(data2.h, col=clust.2$cluster+1)
x11()
kNNdistplot(data3.h, dim(data3.h)[2]+1)
x11()
kNNdistplot(data3.h, dim(data3.h)[2]+1)
lines(1:dim(data3.h)[1], rep(0.03, dim(data3.h)[1]), col='red')
x11()
kNNdistplot(data3.h, dim(data3.h)[2]+1)
lines(1:dim(data3.h)[1], rep(0.025, dim(data3.h)[1]), col='red')
eps.3 <- 0.025
clust.3 <- dbscan(data3.h, eps = eps.3, minPts = dim(data3.h)[2]+1)
clust.3
x11()
plot(data2.h, col=clust.2$cluster+1)
graphics.off()
x11()
plot(data2.h, col=clust.2$cluster+1)
x11()
kNNdistplot(data4.h, dim(data4.h)[2]+1)
x11()
kNNdistplot(data4.h, dim(data4.h)[2]+1)
lines(1:dim(data4.h)[1], rep(0.01, dim(data4.h)[1]), col='red')
eps.4 <- 0.01
clust.4 <- dbscan(data4.h, eps = eps.4, minPts = dim(data4.h)[2]+1)
clust.4
eps.3 <- 0.025
clust.3 <- dbscan(data3.h, eps = eps.3, minPts = dim(data3.h)[2]+1)
clust.3
x11()
plot(data3.h, col=clust.3$cluster+1)
x11()
plot(data4.h, col=clust.4$cluster+1)
data <- read.table('C:/Users/E5440/Desktop/esami/Applied Statistics/Progetto/reduced_dataset.csv', sep=',', header=TRUE)
x11()
kNNdistplot(data1.h, dim(data1.h)[2]+1)
x11()
kNNdistplot(data1.h, dim(data1.h)[2]+1)
lines(1:dim(data1.h)[1], rep(0.005, dim(data1.h)[1]), col='red')
x11()
kNNdistplot(data1.h, dim(data1.h)[2]+1)
lines(1:dim(data1.h)[1], rep(0.05, dim(data1.h)[1]), col='red')
clust.1
x11()
plot(data1.h, col=clust.1$cluster+1)
x11()
plot(data1.h, col=clust.1$cluster+1)
x11()
plot(data2.h, col=clust.2$cluster+1)
View(data)
x11()
kNNdistplot(data1.h, dim(data1.h)[2]+1)
x11()
kNNdistplot(data1.h, dim(data1.h)[2]+1)
lines(1:dim(data1.h)[1], rep(0.005, dim(data1.h)[1]), col='red')
x11()
kNNdistplot(data3.h, dim(data3.h)[2]+1)
x11()
plot(data1.h, col=clust.1$cluster+1)
x11()
plot(data1.h, col=clust.1$cluster+1)
x11()
plot(data1.h, col=clust.1$cluster+1, size = 2)
x11()
plot(data1.h, col=clust.1$cluster+1, pch = 19)
x11()
plot(data1.h, col=clust.1$cluster+1, cex=0.7)
data <- read.table("C:/Users/E5440/Desktop/esami/Nonparametric statistics/Progetto/dataset popolazione/dataset_popolazione_2020.csv")
setwd("C:/Users/E5440/Desktop/esami/Nonparametric statistics/Progetto/dataset popolazione")
data <- read.table("C:/Users/E5440/Desktop/esami/Nonparametric statistics/Progetto/dataset popolazione/dataset_popolazione_2020.csv", header = TRUE, sep=',')
remove(list=ls())
data <- read.table("C:/Users/E5440/Desktop/esami/Nonparametric statistics/Progetto/dataset popolazione/dati_popolazione_lombardia_2020.csv", header = TRUE, sep=',')
View(data)
View(data)
View(data)
data <- data[,-c(1,3,4,5,6,7,9,11,12,14,15)]
View(data)
data<- data[,-2]
View(data)
remove(list=ls())
setwd("C:/Users/E5440/Desktop/esami/Nonparametric statistics/Progetto/dataset arpa")
benzene.senato <- read.table("C:/Users/E5440/Desktop/esami/Nonparametric statistics/Progetto/dataset arpa/milano senato/benzene.csv", header=TRUE, sep=',')
View(benzene.senato)
3*(1:24)
(3*24)+1:(3+1)*24]
(3*24)+1:(3+1)*24
((3*24)+1):((3+1)*24])
((3*24)+1):((3+1)*24))
((3*24)+1):((3+1)*24)
benzene.sen <- NULL
for(i in 1:7){
benzene.sen[i] <- mean(benzene.senato[((i*24)+1):((i+1)*24))
}
benzene.senato <- read.table("C:/Users/E5440/Desktop/esami/Nonparametric statistics/Progetto/dataset arpa/milano senato/benzene.csv", header=TRUE, sep=',')
benzene.sen <- NULL
for(i in 1:7){
benzene.sen[i] <- mean(benzene.senato[((i*24)+1):((i+1)*24))
}
benzene.senato <- read.table("C:/Users/E5440/Desktop/esami/Nonparametric statistics/Progetto/dataset arpa/milano senato/benzene.csv", header=TRUE, sep=',')
benzene.sen <- NULL
for(i in 1:7){
benzene.sen[i] <- mean(benzene.senato[((i*24)+1):((i+1)*24))
}
benzene.senato <- read.table("C:/Users/E5440/Desktop/esami/Nonparametric statistics/Progetto/dataset arpa/milano senato/benzene.csv", header=TRUE, sep=',')
benzene.sen <- NULL
for(i in 1:7)
benzene.sen[i] <- mean(benzene.senato[((i*24)+1):((i+1)*24))
benzene.senato <- read.table("C:/Users/E5440/Desktop/esami/Nonparametric statistics/Progetto/dataset arpa/milano senato/benzene.csv", header=TRUE, sep=',')
benzene.sen <- NULL
for i in 1:7
benzene.sen[i] <- mean(benzene.senato[((i*24)+1):((i+1)*24))
benzene.sen <- NULL
for (i in 1:7){
benzene.sen[i] <- mean(benzene.senato[((i*24)+1):((i+1)*24)),2])
}
benzene.sen <- NULL
for (i in 1:7) {
benzene.sen[i] <- mean(benzene.senato[((i*24)+1):((i+1)*24)),2])
}
setwd("C:/Users/E5440/Desktop/esami/Nonparametric statistics/Progetto/dataset arpa")
benzene.senato <- read.table("C:/Users/E5440/Desktop/esami/Nonparametric statistics/Progetto/dataset arpa/milano senato/benzene.csv", header=TRUE, sep=',')
benzene.sen <- NULL
for (i in 1:7) {
benzene.sen[i] <- mean(benzene.senato[((i*24)+1):((i+1)*24)),2])
}
benzene.sen <- NULL
for (i in 1:7) {
benzene.sen[i] <- mean(benzene.senato[((i*24)+1):((i+1)*24),2])
}
benzene.sen
24*7
benzene.sen <- NULL
for (i in 0:6) {
benzene.sen[i] <- mean(benzene.senato[((i*24)+1):((i+1)*24),2])
}
benzene.sen
biossido.senato <- read.table("C:/Users/E5440/Desktop/esami/Nonparametric statistics/Progetto/dataset arpa/milano senato/biossido di azoto.csv", header=TRUE, sep=',')
biossido.senato <- read.table("C:/Users/E5440/Desktop/esami/Nonparametric statistics/Progetto/dataset arpa/milano senato/biossido di azoto.csv", header=TRUE, sep=',')
biossido.sen <- NULL
for (i in 0:6) {
biossido.sen[i] <- mean(biossido.senato[((i*24)+1):((i+1)*24),2])
}
pm10.sen <- read.table("C:/Users/E5440/Desktop/esami/Nonparametric statistics/Progetto/dataset arpa/milano senato/PM10.csv", header=TRUE, sep=',')
biossido.sen
benzene.sen <- NULL
for (i in 0:6) {
benzene.sen[i+1] <- mean(benzene.senato[((i*24)+1):((i+1)*24),2])
}
biossido.senato <- read.table("C:/Users/E5440/Desktop/esami/Nonparametric statistics/Progetto/dataset arpa/milano senato/biossido di azoto.csv", header=TRUE, sep=',')
biossido.sen <- NULL
for (i in 0:6) {
biossido.sen[i+1] <- mean(biossido.senato[((i*24)+1):((i+1)*24),2])
}
benzene.sen
biossido.sen
benzene.studi <- read.table("C:/Users/E5440/Desktop/esami/Nonparametric statistics/Progetto/dataset arpa/milano città studi/benzene.csv", header=TRUE, sep=',')
benzene.st <- NULL
for (i in 0:6) {
benzene.st[i+1] <- mean(benzene.studi[((i*24)+1):((i+1)*24),2])
}
benzene.st
benzene.sen
biossido.studi <- read.table("C:/Users/E5440/Desktop/esami/Nonparametric statistics/Progetto/dataset arpa/milano città studi/biossido di azoto.csv", header=TRUE, sep=',')
biossido.studi <- read.table("C:/Users/E5440/Desktop/esami/Nonparametric statistics/Progetto/dataset arpa/milano città studi/biossido di azoto.csv", header=TRUE, sep=',')
biossido.st <- NULL
for (i in 0:6) {
biossido.st[i+1] <- mean(biossido.studi[((i*24)+1):((i+1)*24),2])
}
biossido.st
biossido.sen
pm10.st <- read.table("C:/Users/E5440/Desktop/esami/Nonparametric statistics/Progetto/dataset arpa/milano città studi/PM10.csv", header=TRUE, sep=',')
View(pm10.sen)
data <- cbind(benzene.sen,biossido.sen, pm10.sen[,2], benzene.st, biossido.st, pm10.st[2])
View(data)
colnames(data) <- c('Benzene Senato', 'Biossido Senato', 'PM10 Senato', 'Benzene città studi', 'Biossido città studi', 'PM10 città studi')
