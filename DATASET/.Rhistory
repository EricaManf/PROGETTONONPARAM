layout( matrix( c( 1, 2, 3), 1, byrow = T ) )
plot( s, dunif( s, 0, 1 ), main = "uniforme", type = "l", ylim = c( 0, 1 ) ) plot( s, dexp( s, 1 ), main = "esponenziale", type = "l", ylim = c( 0, 1 ) ) plot( s, dnorm( s, 0, 0.5 ), main = "normale", type = "l", ylim = c( 0, 1 ) )
help(dunif)
help(dexp)
library(readxl)
polizia <- read_excel("C:/Users/Elena/Desktop/Elena/Polimi/Metodi e modelli inferenza statistica/PROGETTO/polizia.xlsx")
View(polizia)
library(readxl)
X2015 <- read_excel("C:/Users/Elena/Desktop/Elena/Polimi/Metodi e modelli inferenza statistica/PROGETTO/2015.xlsx")
View(X2015)
help(qqplot)
dim(savings)
dim(polizia)
head(polizia)
summary(polizia)
print(sapply(polizia,function(x) any(is.na(x))))
print(sapply(polizia, typeof))
pairs(polizia[ , c('id', 'name', 'date', 'manner of death', 'armed', 'age', 'gender', 'race', 'city', 'state', 'sign of illness', 'threat level', 'flee', 'body camera')], pch = 16)
pairs(polizia[ , c('id', 'name', 'date', 'manner_of_death', 'armed', 'age', 'gender', 'race', 'city', 'state', 'signs_of_mental_illness', 'threat_level', 'flee', 'body_camera')], pch = 16)
pairs(polizia[ , c('armed', 'age', 'gender', 'race', 'city', 'state', 'signs_of_mental_illness', 'threat_level', 'flee', 'body_camera')], pch = 16)
pairs(polizia[ , c('age')], pch = 16)
help("pairs")
pairs(polizia[ , c('id','age')], pch = 16)
pairs(polizia[ , c('date','age')], pch = 16)
print(sapply(2015, typeof))
data(2015)
data(x2015)
data(X2015)
data(X2015)
library(readxl)
X2015 <- read_excel("C:/Users/Elena/Desktop/Elena/Polimi/Metodi e modelli inferenza statistica/PROGETTO/2015.xlsx")
View(X2015)
library(readxl)
X2015 <- read_excel("C:/Users/Elena/Desktop/Elena/Polimi/Metodi e modelli inferenza statistica/PROGETTO/2015.xlsx")
View(X2015)
data(X2015)
View(X2015)
View(X2015)
View(X2015)
data(X2015)
dim(X2015)
head(X2015)
summary(X2015)
print(sapply(X2015,function(x) any(is.na(x))))
print(sapply(X2015, typeof))
pairs(X2015[ , c('Happiness rank','Happiness score')], pch = 16)
pairs(X2015[ , c('Happiness Rank','Happiness Score')], pch = 16)
polizia=read.csv('polizia.csv')
dati=polizia[which(polizia$state=="CA")
attach(dati)
library(RColorBrewer)
mycolors=brewer.pal(length(levels(age)),'Set3')
eta=levels(age)
length(eta)
boxplot(Rolling.year.total.number.of.shootings ~ age, col=mycolors)
abline(h= mean(Rolling.year.total.number.of.shootings), col="red")
dati=polizia[which(polizia$state=="CA")
attach(dati)
library(RColorBrewer)
mycolors=brewer.pal(length(levels(age)),'Set3')
eta=levels(age)
length(eta)
boxplot(Rolling.year.total.number.of.shootings ~ age, col=mycolors)
abline(h= mean(Rolling.year.total.number.of.shootings), col="red")
dati2=polizia[which(polizia$state=="CA"), ]
attach(dati2)
pistola= polizia[which(armed=="gun")]
pistola= armed[which(armed=="gun")]
disarmato= armed[which(armed=="unarmed")]
coltello= armed[which(armed=="knife")]
giocattolo= armed[which(armed=="toy weapon")]
mod= lm(pistola~giocattolo+coltello+disarmato)
help(lm)
dati2=polizia[which(polizia$state=="CA"), ]
attach(dati2)
pistola= armed[which(armed=="gun")]
disarmato= armed[which(armed=="unarmed")]
coltello= armed[which(armed=="knife")]
mod= lm(pistola~coltello+disarmato)
summary(mod)
summary(dati2)
clc
clear all
library(readxl)
Y2015 <- read_excel("C:/Users/Elena/Desktop/Elena/Polimi/Metodi e modelli inferenza statistica/PROGETTO/2015.xlsx",
col_types = c("text", "text", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "numeric", "numeric"))
View(Y2015)
data(Y2015)
data(Y2015)
dim(Y2015)
head(Y2015)
summary(Y2015)
print(sapply(Y2015,function(x) any(is.na(x))))
print(sapply(Y2015, typeof))
pairs(Y2015[ , c('Happiness Rank','Happiness Score')], pch = 16)
pairs(Y2015[ , c('Happiness Rank','Happiness Score', 'Standard Error', 'Economy (GDP per Capita)','Freedom', 'Generosity')], pch = 16)
pairs(Y2015[ , c('Happiness Rank','Happiness Score', 'Standard Error', 'Economy (GDP per Capita)','Freedom', 'Generosity', 'Trust (Government Corruption)')], pch = 16)
lm('Happiness Rank'~ "Happiness Score")
lm('Happiness Rank'~ 'Happiness Score')
library(readxl)
X2016 <- read_excel("C:/Users/Elena/Desktop/Elena/Polimi/Metodi e modelli inferenza statistica/PROGETTO/ok/2016.xlsx")
View(X2016)
library(readxl)
X2017 <- read_excel("C:/Users/Elena/Desktop/Elena/Polimi/Metodi e modelli inferenza statistica/PROGETTO/ok/2017.xlsx")
View(X2017)
library(readxl)
X2018 <- read_excel("C:/Users/Elena/Desktop/Elena/Polimi/Metodi e modelli inferenza statistica/PROGETTO/ok/2018.xlsx")
View(X2018)
library(readxl)
X2019 <- read_excel("C:/Users/Elena/Desktop/Elena/Polimi/Metodi e modelli inferenza statistica/PROGETTO/ok/2019.xlsx")
View(X2019)
# Importo il dataset e lo modifico in modo da non modificare il file originale
data_2016 = X2016;
data_2016<-data.frame(data_2016)
attach(data_2016);
# Sisitemo il dataset
n = 156;
for(i in 4:9){
data_2016[,i]<-as.numeric(data_2016[,i])
}
for (i in 1:n){
if (data_2016[['Score']][i] > 1){
data_2016[['Score']][i] = data_2016[['Score']][i] / 1000;
}
}
# Importo il dataset e lo modifico in modo da non modificare il file originale
data_2017 = X2017;
data_2017<-data.frame(data_2017)
attach(data_2017);
# Sisitemo il dataset
n = 156;
View(polizia)
data_2016[,i]<-as.numeric(data_2016[,i])
for(i in 4:9){
data_2016[,i]<-as.numeric(data_2016[,i])
}
for (i in 1:n){
if (data_2016[['Score']][i] > 1){
data_2016[['Score']][i] = data_2016[['Score']][i] / 1000;
}
}
setwd("D:/Users/Elena/Desktop/Elena/Polimi/Applied Statistics/lab/LAB_FDA")
# Load package fda
library(fda)
setwd("D:/Users/Elena/Desktop/Elena/Polimi/Applied Statistics/lab/LAB_FDA")
setwd("D:/Users/Elena/Desktop/Elena/Polimi/Applied Statistics/lab/LAB_FDA")
install.packages("robCompositions")
library(rgl)
knitr::opts_chunk$set(echo = TRUE)
knitr::knit_hooks$set(webgl = hook_webgl)
library(roahd)
P <- 101
grid <-  seq( 0, 1, length.out =  P)
alpha <-  0.2
beta <-  0.2
C_st <- exp_cov_function( grid, alpha, beta )
image( C_st,
main = 'Exponential covariance function',
xlab = 'grid', ylab = 'grid')
m <- sin(pi*grid)+sin(2*pi*grid)
n <- 100
set.seed(26111992)
data <- generate_gauss_fdata(N = n,centerline = m,Cov=C_st)
matplot(grid,t(data), type="l", col=adjustcolor(col=1,alpha.f = .4))
lines(grid,m, col="blue", lwd=5)
f_data <- fData(grid,data)
plot(f_data) # what happens if I do plot(data)?
lines(grid,m, col="black", lwd=5)
class(f_data)
alpha <-  1
beta <-  0.2
C_st <- exp_cov_function( grid, alpha, beta )
data <- generate_gauss_fdata(N = n,centerline = m,Cov=C_st)
f_data <- fData(grid,data)
plot(f_data, main="High overall level of variability")
alpha <-  .1
beta <-  0.0001
C_st <- exp_cov_function( grid, alpha, beta )
data <- generate_gauss_fdata(N = n,centerline = m,Cov=C_st)
f_data <- fData(grid,data)
plot(f_data, main="High autocorrelation")
alpha <-  .1
beta <-  100
C_st <- exp_cov_function( grid, alpha, beta )
data <- generate_gauss_fdata(N = n,centerline = m,Cov=C_st)
f_data <- fData(grid,data)
plot(f_data, main="Virtually uncorrelated signals")
data("mfD_healthy") #
univariate_fdata <- mfD_healthy$fDList[[1]] # I consider the first lead only
plot(univariate_fdata)
band_depth <- BD(Data = univariate_fdata)
modified_band_depth <- MBD(Data = univariate_fdata)
median_curve <- median_fData(fData = univariate_fdata, type = "MBD") # still an fData object
median_curve_manual <- univariate_fdata[which.max(modified_band_depth),] # still an fData object
all(median_curve_manual$values==median_curve$values)
plot(univariate_fdata)
grid_ecg <- seq(median_curve_manual$t0,median_curve_manual$tP,by=median_curve_manual$h)
lines(grid_ecg,median_curve_manual$values)
bivariate_data <- as.mfData(list(mfD_healthy$fDList[[1]], mfD_healthy$fDList[[2]]))
plot(bivariate_data)
cor_spearman(bivariate_data, ordering='MEI')
MEI_first_lead <- MEI(bivariate_data$fDList[[1]])
MEI_second_lead <- MEI(bivariate_data$fDList[[2]])
cor(MEI_first_lead, MEI_second_lead)
do.call(args = lapply(1:2, function(ind)
MEI(bivariate_data$fDList[[ind]])), what = "cor")
alpha <-  0.2
beta <-  0.002
C_st <- exp_cov_function( grid, alpha, beta )
data <- generate_gauss_fdata(N = n,centerline = m,Cov=C_st)
f_data <- fData(grid,data)
outlier_share <- .1
n_outliers <-   n*outlier_share
out_highlighter <- rep(c(1,2),c(n-n_outliers,n_outliers))
f_data_temp <- f_data[1:(n*(1-outlier_share)),] # Coding tip: subsetting is mabe possible by the S3 class fdata
mag_temp <- f_data[(n*(1-outlier_share)+1):n,] * runif(10,2,3)
f_data_mag <- append_fData(f_data_temp,mag_temp)
plot(f_data_mag, col=out_highlighter)
shift_q <- .5
mu_warp=mu=sin(pi*grid+shift_q)+sin(2*pi*grid+shift_q)
shape_temp=generate_gauss_fdata(N = n_outliers, mu_warp, Cov=C_st)
shape_temp=fData(grid,shape_temp)
fdata_shape=append_fData(f_data_temp,shape_temp)
plot(fdata_shape, col=out_highlighter)
invisible(fbplot(f_data_mag, main="Magnitude outliers"))
invisible(outliergram(f_data_mag))
fbplot(fdata_shape, main="Shape outliers")
outliergram(fdata_shape)
out_shape <- outliergram(fdata_shape, display = FALSE)
out_shape$ID_outliers
library(sf)
library(dplyr)
library(gstat)
library(maps)
library(maptools)
library(rgdal)
library(sp)
library(shp2graph)
library(lubridate)
# controllo ingressi in area c
setwd('C:/Users/Elena/Desktop/Elena/Polimi/MAGISTRALE/Nonparametric statistics/Progetto/github repository/PROGETTONONPARAM/DATASET')
ingressi_areac_varchi <- st_read("ingressi_areac_varchi")
ingressi_areac_varchi <- st_read("ingressi_areac_varchi.csv")
View(ingressi_areac_varchi)
library(sp)
xym <- cbind(ingressi_areac_varchi$LONG_X_4326, ingressi_areac_varchi$LAT_Y_4326)
p = Polygon(xym)
View(xym)
as.double(ingressi_areac_varchi$LONG_X_4326)
xym <- cbind(as.double(ingressi_areac_varchi$LONG_X_4326), as.double(ingressi_areac_varchi$LAT_Y_4326))
View(xym)
p = Polygon(xym)
ps = Polygons(list(p),1)
sps = SpatialPolygons(list(ps))
plot(sps)
poly <- st_polygon(xym)
help("st_polygon")
help("st_polygonize")
poly <- st_polygonize(points)
poly <- st_polygonize(xym)
poly <- st_polygonize(st_as_sfc(xym))
ppp <- cbind(ingressi_areac_varchi$LONG_X_4326,ingressi_areac_varchi$LAT_Y_4326)
poly <- st_polygonize(st_as_sfc(ppp))
polygon_c <- st_as_sf(sps)
View(polygon_c)
st_polygon(polygon_c)
library(sf)
library(dplyr)
library(gstat)
library(maps)
library(maptools)
library(rgdal)
library(sp)
library(shp2graph)
library(lubridate)
# controllo ingressi in area c
setwd('C:/Users/Elena/Desktop/Elena/Polimi/MAGISTRALE/Nonparametric statistics/Progetto/github repository/PROGETTONONPARAM/DATASET')
ingressi_areac_varchi <- st_read("ingressi_areac_varchi.csv")
library(sp)
xym <- cbind(as.double(ingressi_areac_varchi$LONG_X_4326), as.double(ingressi_areac_varchi$LAT_Y_4326))
p <- Polygon(xym)
ps <- Polygons(list(p),1)
sps <- SpatialPolygons(list(ps))
x11()
plot(sps)
polygon_c <- st_as_sf(sps)
comuni_italia <- st_read("Limiti01012020/Com01012020/Com01012020_WGS84.shp")
comuni_italia <-st_transform(comuni_italia, crs=4326)
Lombardia_comuni <- comuni_italia %>% filter(COD_REG == 3)
Milano = Lombardia_comuni %>% filter(COMUNE == "Milano")
x11()
plot(st_geometry(Milano), col = 3, border = 'grey',  axes = TRUE)
plot(st_geometry(st_centroid(Milano)), pch = 3, col = 'red', add = TRUE)
x11()
plot(st_geometry(Lombardia), col = sf.colors(12, categorical = TRUE), border = 'grey',
axes = TRUE)
plot(st_geometry(st_centroid(lombardia)), pch = 3, col = 'red', add = TRUE)
x11()
plot(st_geometry(Milano), col = 3, border = 'grey',  axes = TRUE)
plot(st_geometry(st_centroid(Milano)), pch = 3, col = 'red', add = TRUE)
x11()
plot(st_geometry(Lombardia_comuni), col = sf.colors(12, categorical = TRUE), border = 'grey',
axes = TRUE)
plot(st_geometry(st_centroid(Lombardia_comuni)), pch = 3, col = 'red', add = TRUE)
x11()
plot(st_geometry(Milano), col = 3, border = 'grey',  axes = TRUE)
plot(st_geometry(st_centroid(Milano)), pch = 3, col = 'red', add = TRUE)
x11()
plot(st_geometry(Milano), col = 3, border = 'grey',  axes = TRUE)
plot(st_geometry(st_centroid(Milano)), pch = 3, col = 'red', add = TRUE)
plot(polygon_c, col='blue', add=TRUE)
